//Sets
//Ordered sets
#include <set>
//Упорядоченный набор -> ссылка на двоичное дерево поиска
//Hash sets
#include <unordered-set>
//Неупордоченный набор -> по специальной хэш-функции вычисляется значение, если одинаковые, то формируется линейный список

std::set<int> s {9, 2, 8}; // 2 8 9
s.insert(7); // 2 7 8 9

std::multiset<int> s; //возможно несколько одинаковых ключей

s.insert(8);
s.insert(7);
s.insert(7); // {7 7 8}

// Key -> Value Maps
#include <map> //двоичное дерево поиска, ноды - пары ключ:значение
#include <unordered_map> //пары вычисляются черех хэш-функции, если одинаковые, формируется линейный список
std::pair<int, double> p {4, 8.15};
cout << p.first << p.second;

std::map<int, std::string> m;
m.insert({2, "B"}); // {2:B}
m.emplace(1, "A"); // {1:A, 2:B}
m[2] = "Y"; //modify: {1:A, 2:Y}
m[3] = "Z"; //insert: {1:A, 2:Y, 3:Z}

//C++ 17 feature
m.insert_or_assign(4, "D"); // {1:A, 2:Y, 3:Z, 4:D}
m.insert_of_assign(1, "X"); //{1:X, ...}

//В ordered set/map в узлах дерева хранится по 2 указателя: на следующие левый и правый элементы, если таких нет, в указателях пусто
//В unordered set/map от каждой хэш-функции идет указатель на линейный список

//Про внутреннее устройством мапы
//Переменная -- ссылка на hash table
//Там есть hash бакеты. Их точное количество в зависимости от числа вставленных элементов не стандартизиированно и зависит от реализации библиотеки
//В каждом бакете есть индексы, в которых лежат значения хэш-функций от конкретных чисел. 
//Эти значения имеют ссылки на свои линейные списки пар ключ:значение






